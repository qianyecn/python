#!/usr/bin/python3 
#coding=utf-8
# 这是一个注释
print("Hello, World")
'''
这是多行注释，用三个单引号
这是多行注释，用三个单引号 
这是多行注释，用三个单引号
'''
"""
这是多行注释，用三个双引号
这是多行注释，用三个双引号 
这是多行注释，用三个双引号
"""
'''
+-*/ %取模 **幂运算，次方 //取整除
==  !=  >   <   >=  <=
=赋值   +=  -=  *=  /=  %=  **= //=
&按位与运算符   |按位或运算符   ^按位异或运算符 ~按位取反运算符 <<左移动运算符  >>右移动运算符
and or  not     in      not in 
is      is not 判断两个标识符是不是引用自一个对象
'''
word[:2]    # 前两个字符
word[2:]    # 除了前两个字符之外，其后的所有字符
word[-1]     # 最后一个字符
word[-2]     # 倒数第二个字符
word[-2:]    # 最后两个字符
word[:-2]    # 除了最后两个字符之外，其前面的所有字符
word[-0]     # (既然 -0 等于 0) 
 +---+---+---+---+---+
 | H | e | l | p | A |
 +---+---+---+---+---+
 0   1   2   3   4   5
-5  -4  -3  -2  -1
# 列表
squares[0]  # 索引返回的指定项
1
squares[-1]
25
squares[-3:]  # 切割列表并返回新的列表
[9, 16, 25]
# 所有的分切操作返回一个包含有所需元素的新列表。如下例中，分切将返回列表 squares 的一个拷贝：
squares[:]
[1, 4, 9, 16, 25]
列表还支持拼接操作：
squares + [36, 49, 64, 81, 100]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
cubes[3] = 64  # 修改列表值
cubes.append(216)  # cube列表中添加新值
cubes.append(7  3)  #  cube列表中添加第七个值
letters[2:5] = ['C', 'D', 'E']#替换一些值
letters[2:5] = []#移除值
# 也可以使用嵌套列表（在列表里创建其它列表），例如：
a = ['a', 'b', 'c']
n = [1, 2, 3]
x = [a, n]
x
[['a', 'b', 'c'], [1, 2, 3]]
x[0]
['a', 'b', 'c']
x[0][1] #x中第一个列表中第2个元素
'b'
#元组
'''Python 的元组与列表类似，不同之处在于元组的元素不能修改。
元组使用小括号，列表使用方括号。
元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。'''
tup1 = (); #创建空元组
tup1=(50,) #元组只包含一个元素
